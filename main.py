
import logging
import json
import random
import asyncio
from datetime import datetime, timedelta
import pytz

from telegram import Update, ChatMember
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
)

# === –ö–û–ù–§–ò–ì ===
BOT_TOKEN = "8276571944:AAF3ypIPxV-IPJYW-Rr6PiEql8vUONzEGeE"
GROUP_CHAT_ID = -1002444770684
THREAD_ID = 2
REMINDER_HOUR = 20
REMINDER_MINUTE = 50
USER_DATA_FILE = "subscribers.json"

MSK = pytz.timezone("Europe/Moscow")

logging.basicConfig(level=logging.INFO)

def load_users():
    try:
        with open(USER_DATA_FILE, "r") as f:
            return json.load(f)
    except:
        return []

def save_users(user_ids):
    with open(USER_DATA_FILE, "w") as f:
        json.dump(user_ids, f)

subscribers = load_users()

JOKES = [
    "üíå –ü—Ä–∏–≤–µ—Ç –ª—é–±–∏–º—ã–π. –ü–æ—Ä–∞ –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—ã ‚Äî –∞–∫—Ç–∏–≤ —Å–∞–º —Å–µ–±—è –Ω–µ –∑–∞—Å–∫—Ä–∏–Ω–∏—Ç!",
    "üì∏ –°–∫—Ä–∏–Ω –∏–ª–∏ –ø–æ–∑–æ—Ä. –¢—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å!",
    "üòé –õ–µ–≥–µ–Ω–¥—ã –¥–µ–ª–∞—é—Ç —Å–∫—Ä–∏–Ω—ã –≤ 20:50. –ù–µ –ø–æ–¥–≤–µ–¥–∏ –ª–µ–≥–µ–Ω–¥—É!",
    "ü•µ –ü–æ—Ä–∞ —Å–∫—Ä–∏–Ω–∏—Ç—å. –ê–∫—Ç–∏–≤ –∂–∞–∂–¥–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è!",
    "üëÄ –Ø –Ω–µ —à–ø–∏–æ–Ω, –Ω–æ —è –∑–Ω–∞—é, —á—Ç–æ —Ç—ã –∑–∞–±—ã–ª –ø—Ä–æ –∞–∫—Ç–∏–≤. –ò—Å–ø—Ä–∞–≤—å—Å—è!",
    "ü´† –£ –∫–æ–≥–æ-—Ç–æ —É–∂–µ 0 –æ—á–∫–æ–≤, –∞ —Ç—ã –≤—Å—ë –µ—â—ë –Ω–µ —Å–∫—Ä–∏–Ω–∏—à—å?",
    "üò¥ –°–∫—Ä–∏–Ω—ã –Ω–µ —Å–¥–µ–ª–∞—é—Ç—Å—è —Å–∞–º–∏. –ü—Ä–æ—Å—ã–ø–∞–π—Å—è!",
    "üéØ –û–¥–∏–Ω —Å–∫—Ä–∏–Ω ‚Äî –∏ —Ç—ã –±–ª–∏–∂–µ –∫ –ø–æ–±–µ–¥–µ.",
    "üß† –£–º–Ω—ã–π –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—ã –≤–æ–≤—Ä–µ–º—è. –ê —Ç—ã —É–º–Ω—ã–π, –¥–∞? üòâ",
    "ü•∑ –°–∫—Ä–∏–Ω–∏ –±—ã—Å—Ç—Ä–æ –∏ —Ç–∏—Ö–æ. –ö–∞–∫ –Ω–∏–Ω–¥–∑—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
] + [f"üí° –í–∞—Ä–∏–∞–Ω—Ç —à—É—Ç–∫–∏ #{i+11}: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ –∞–∫—Ç–∏–≤!" for i in range(90)]

async def is_user_in_group(bot, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=GROUP_CHAT_ID, user_id=user_id)
        return member.status in [ChatMember.MEMBER, ChatMember.OWNER, ChatMember.ADMINISTRATOR]
    except:
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = f"@{user.username}" if user.username else user.full_name

    if update.effective_chat.type != "private":
        return

    if not await is_user_in_group(context.bot, user_id):
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return

    if user_id not in subscribers:
        subscribers.append(user_id)
        save_users(subscribers)
        await update.message.reply_text("‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Å–∫—Ä–∏–Ω–∞—Ö –≤ 20:50 –ø–æ –ú–°–ö!")
        await context.bot.send_message(
            chat_id=GROUP_CHAT_ID,
            message_thread_id=THREAD_ID,
            text=f"‚úÖ {username} –Ω–∞–∂–∞–ª —Å—Ç–∞—Ä—Ç –∏ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 20:50 –ø–æ –ú–°–ö."
        )
    else:
        await update.message.reply_text("üòé –¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in subscribers:
        subscribers.remove(user_id)
        save_users(subscribers)
        await update.message.reply_text("‚ùå –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
    else:
        await update.message.reply_text("–¢—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω üòÖ")

async def list_subs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìã –ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
"
    if not subscribers:
        text += "üëª –ù–∏–∫–æ–≥–æ –Ω–µ—Ç... –æ–¥–Ω–∏ –ø—Ä–∏–∑—Ä–∞–∫–∏. –ö—Ç–æ –±—É–¥–µ—Ç —Å–∫—Ä–∏–Ω–∏—Ç—å –∞–∫—Ç–∏–≤?!"
    else:
        for uid in subscribers:
            text += f"‚Ä¢ [{uid}](tg://user?id={uid})\n"
    await update.message.reply_text(text, parse_mode="Markdown")

async def reminder_loop(bot):
    while True:
        now = datetime.now(MSK)
        target = now.replace(hour=REMINDER_HOUR, minute=REMINDER_MINUTE, second=0, microsecond=0)
        if now >= target:
            target += timedelta(days=1)
        wait_seconds = (target - now).total_seconds()
        await asyncio.sleep(wait_seconds)
        try:
            await bot.send_message(
                chat_id=GROUP_CHAT_ID,
                message_thread_id=THREAD_ID,
                text="‚è∞ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≥—Ä—É–ø–ø—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫—Ä–∏–Ω–∞—Ö –∞–∫—Ç–∏–≤–∞ –≤ 20:50 –ø–æ –ú–°–ö!"
            )
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —Ç–µ–º—É: {e}")
        for user_id in subscribers:
            try:
                msg = random.choice(JOKES)
                await bot.send_message(chat_id=user_id, text=msg)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("list", list_subs))
    asyncio.create_task(reminder_loop(app.bot))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç 20:50 –ø–æ –ú–°–ö...")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
